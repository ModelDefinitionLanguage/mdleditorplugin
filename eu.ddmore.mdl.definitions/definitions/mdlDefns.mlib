// Production MDL definitions.


_type int _int;
_type real _real;
_type boolean _bool;
_type string _str;
_type pdf _pdf;
_type pmf _pmf;
_type deriv _deriv;
_type vector _vector;
_type matrix _matrix;
_type function _function;
_type reference _reference;
_type Mapping _mapping;
_type undefined _undef;
_type genericEnum _category;
_type genericCategoryValue _categoryValue;
_type randomVariable _rv;


// Custom Types
_type transType _enum (none, ln, logit, probit);
_sublist fixEffAtts _atts cov::reference[::real], catCov::reference[::genericCategoryValue], coeff::reference[::real]
					_sig (cov, coeff), (catCov, coeff);
					
_type priorElementType _enum(matrix, vector);					

_type divUse _enum (covariate, variable, amt, dv, dvid, cmt, mdv, idv, id, rate, ignore, varLevel, catCov, ss, ii, addl, evid, cens);
_type ddvUse _enum (doseTime, doseInterval, covariate, catCov, variable, dvid);
_type varLvlType _enum (parameter, observation);
_type input _enum (nonmemFormat);
_type priorInput _enum (/*RList,*/ csv);
_type cmtType _enum (depot, compartment, elimination, transfer, distribution, direct, effect);
_type varType _enum (cov, corr, sd, var);
_type estimateType _enum (scalar, vector, matrix);
_type obstype _enum (combinedError1, combinedError2, additiveError, proportionalError, categorical, count, discrete, tte, continuous, userDefined);
_type sampletype _enum (simple, combi);
_type sampleElement _enum (bolusAmt, infAmt, duration, sampleTime, numberTimes, covariate, numberArms, armSize, parameter, doseTime);
_type objType _enum (mdlObj, dataObj, parObj, taskObj, designObj, priorObj);

// Data input variables

_mapping DoseMapping _data ::int _col ::Cmt _tgt ::reference[::dosingTarget]; 
_mapping ObsMapping _data ::int _col ::Dvid _tgt ::reference[::observation]; 

//_sublist ObsMapping _atts dvid::int, variable::continuousObs, countVar::countObs _sig(dvid, variable), (dvid, countVar);

_list DataColumn _super;
_list Covariate _alt ::real _extends DataColumn _atts use::divUse, interp::reference[::function(::real, ::real, ::real, ::real, ::real)::real]
							_sig (use, interp?);  
_list CatCovariate _extends DataColumn _atts use::divUse _cat use::int _sig (use);  
_list Amt _extends DataColumn _atts use::divUse, define::DoseMapping, variable::reference[::dosingTarget] _sig (use, define), (use, variable);
//_list Dv _extends DataColumn _atts use::divUse, define::ObsMapping, countVar::reference[::countObs], variable::reference[::continuousObs]
//			_sig (use, define), (use, variable), (use, countVar);
_list Dv _extends DataColumn _atts use::divUse, define::ObsMapping, variable::reference[::observation]
			_sig (use, define), (use, variable);
_list Idv _extends DataColumn _atts use::divUse _sig(use);
_list Cmt _extends DataColumn _atts use::divUse _sig(use);
_list Id _extends DataColumn _atts use::divUse _sig(use);
_list DataVarLevel _extends DataColumn _atts use::divUse _sig(use);
_list Mdv _extends DataColumn _atts use::divUse _sig(use);
_list rate _extends DataColumn _atts use::divUse _sig(use);
_list ss _extends DataColumn _atts use::divUse _sig(use);
_list ii _extends DataColumn _atts use::divUse _sig(use);
_list addl _extends DataColumn _atts use::divUse _sig(use);
_list Dvid _extends DataColumn _atts use::divUse _sig(use);
_list ignore _atts use::divUse _sig(use);
_list Evid _extends DataColumn _atts use::divUse _sig(use);
_list CensCol _extends DataColumn _atts use::divUse _sig(use);
_list DataVariable  _extends DataColumn _atts use::divUse, interp::reference[::function(::real, ::real, ::real, ::real, ::real)::real]
							_sig (use, interp?);
//_list CensorList _extends DataColumn _atts use::divUse _sig(use); 

// data derived variables
_list DoseTime _atts use::ddvUse, idvColumn::reference[::Idv], amtColumn::reference[::Amt]
	_sig (use, idvColumn, amtColumn);
_list DoseInterval _atts use::ddvUse, idvColumn::reference[::Idv], amtColumn::reference[::Amt]
	_sig (use, idvColumn, amtColumn);
_list DDVariable _atts use::ddvUse, column::reference[::DataColumn] _sig(use, column);
_list DDCovariate _atts use::ddvUse, column::reference[::DataColumn] _sig(use, column);
_list DDCatCovariate _atts use::ddvUse _cat use::int _sig (use);  

// Source
_list Source _atts file::string, inputFormat::input _sig(file, inputFormat);


//_sublist CsvColsSublist _atts colNum::Vector[::Int], vector::Reference[::Vector], matrix::Reference[::Matrix]
//						_sig (colNum, vector), (colNum, matrix)
//						;
_sublist priorFormat _atts element::string, type::priorElementType
					_sig (element, type);

// Priors
_list PriorTabularSource _super;
//_list PriorSourceRList _atts file::string, inputFormat::priorInput, format::vector[::priorFormat]
//		_sig(file, inputFormat, format);
_list PriorSourceCsv _extends PriorTabularSource _atts file::string, inputFormat::priorInput, column::vector[::string]
		_sig(file, inputFormat, column);

//_type PriorInputType _enum(vector, matrix);
_list PriorVectorInput _anon _atts vectorVar::reference[::vector[::real]], src::PriorSourceCsv, column::string
		_sig(vectorVar, src, column);
_list PriorMatrixInput _anon _atts matrixVar::reference[::matrix[[::real]]], src::PriorSourceCsv, column::vector[::string]
		_sig(matrixVar, src, column);
		
		
// Random Variables
_type CorrelationEnumType _enum (covariance, correlation);
_list CovarianceList _anon _atts type::CorrelationEnumType, matrix::matrix, rv1::randomVariable, rv2::randomVariable, value::real
						_sig(type, matrix),
							(type, rv1, rv2, value);
_list CorrelationList _anon _atts type::CorrelationEnumType, matrix::matrix, rv1::randomVariable, rv2::randomVariable, value::real
						_sig(type, matrix),
							(type, rv1, rv2, value);

		
// Individual Parameters
_type IndivTypeType _enum (linear, general, /*userDefined,*/ rv);

_list IndivAbstractList _super _alt ::real;

//_sublist EtaFreeRanEffSublist _atts var::real, sd::real, varLvl::VarLevel _sig(var, varLvl), (sd, varLvl);

_list IndivParamLinear _alt ::real _extends IndivAbstractList
		_atts type::IndivTypeType, trans::transType,
				pop::real, fixEff::vector[::fixEffAtts], ranEff::vector[::randomVariable] //, omega::vector[::EtaFreeRanEffSublist]
		_sig(type, trans?, pop, fixEff?, ranEff)/*, (type, trans?, pop, fixEff?, omega)*/;
		
_list IndivParamGeneral _alt ::real _extends IndivAbstractList
		_atts type::IndivTypeType, trans::transType, grp::real,
				ranEff::vector[::randomVariable]  //, omega::vector[::EtaFreeRanEffSublist]
			_sig(type, trans?, grp, ranEff)/*, (type, trans?, grp, omega)*/; 

_list IndivUserDefined _alt ::real _extends IndivAbstractList
		_atts type::IndivTypeType, value::real
			_sig(type, value); 

_list IndivRvList _anon _extends IndivAbstractList
		_atts type::IndivTypeType, variable::randomVariable[::real]
		_sig(type, variable);

// Population parameter lists

_type PopnTypeType _enum(continuous, categorical);

_list PopnContinuousList _anon
		_atts type::PopnTypeType, variable::randomVariable[::real]
		_sig(type, variable);

_list PopnCategoricalList _anon
		_atts type::PopnTypeType, variable::randomVariable[::genericEnum]
		_sig(type, variable);

// Model
	
_list varLevel _atts type::varLvlType, level::int
	_sig(type, level);
_list dosingTarget _super;
_list DerivList _alt ::deriv _extends dosingTarget _atts deriv::real, init::real, x0::real, wrt::reference[::real]
	_sig(deriv, init?, x0?, wrt?);
_list dosingVar _alt ::real _extends dosingTarget _atts value::real _sig(value);


// Compartments

_list CmtDirect _alt ::real _atts type::cmtType, modelCmt::int, to::reference[::dosingTarget],
		modelDur::real, tlag::real, finput::real
		_sig(type, modelCmt?, to, modelDur?, tlag?, finput?);

_list Effect _alt ::real _atts type::cmtType, modelCmt::int, from::reference[::dosingTarget], keq::real
			_sig (type, modelCmt?, from, keq);
			
_list Depot _alt ::real _atts type::cmtType, modelCmt::int, to::reference[::dosingTarget], ka::real,
						modelDur::real, tlag::real, finput::real, ktr::real, mtt::real
			_sig (type, modelCmt?, to, ka, tlag?, finput?),
				 (type, modelCmt?, to, ka, ktr, mtt),
				 (type, modelCmt?, to, modelDur, ktr, mtt),
				 (type, modelCmt?, to, modelDur, tlag?, finput?);

_list Transfer _anon _atts type::cmtType, modelCmt::int, to::reference[::dosingTarget], from::reference[::dosingTarget], kt::real
			_sig (type, modelCmt?, to, from, kt);

_list Compartment _alt ::real _extends dosingTarget
		_atts  type::cmtType, modelCmt::int
		_sig (type, modelCmt?);
		
_list Elimination _anon _atts type::cmtType, modelCmt::int, from::reference[::dosingTarget], v::real,
								cl::real, k::real, vm::real, km::real
				_sig (type, modelCmt?, from, v?, k),
					 (type, modelCmt?, from, v?, cl),
					 (type, modelCmt?, from, vm, km);
					 
_list Distribution _atts type::cmtType, modelCmt::int, from::reference[::dosingTarget],
								kin::real, kout::real
				_sig(type, modelCmt?, kin, kout, from);

	 
// Observations
_list observation _super;
_list combinedError1List _extends observation
	_atts type::obstype, trans::transType, lhsTrans::boolean,
			additive::real, proportional::real, prediction::real, eps::randomVariable[::real]
		_sig(type, trans?, lhsTrans?, additive, proportional, prediction, eps)
	;
_list combinedError2List _extends observation
	_atts type::obstype, trans::transType, lhsTrans::boolean,
			additive::real, proportional::real, prediction::real, eps::randomVariable[::real]
			_sig(type, trans?, lhsTrans?, additive, proportional, prediction, eps)
	;
_list additiveErrorList _extends observation
	_atts type::obstype, trans::transType, lhsTrans::boolean,
			additive::real, prediction::real, eps::randomVariable[::real]
			_sig(type, trans?, lhsTrans?, additive, prediction, eps)
	;
_list proportionalErrorList _extends observation
	_atts type::obstype, trans::transType, lhsTrans::boolean,
			proportional::real, prediction::real, eps::randomVariable[::real]
			_sig(type, trans?, lhsTrans?, proportional, prediction, eps)
	;
_list CatObs _anon _extends observation _atts type::obstype, variable::randomVariable[::genericEnum] _sig(type, variable);
_list CountObs _anon  _extends observation _atts type::obstype, variable::randomVariable[::int] _sig(type, variable);
_list DiscreteObs _anon  _extends observation _atts type::obstype, variable::randomVariable[::genericEnum] _sig(type, variable);
_list TteObs _extends observation _atts type::obstype, hazard::reference[::real], maxEvent::real _sig(type, hazard, maxEvent?);
_list ContinuousObsList _anon _extends observation _atts type::obstype, variable::randomVariable[::real] _sig(type, variable);
_list UserDefinedObsList _extends observation _atts type::obstype, value::real, prediction::real, weight::real
									_sig(type, value, prediction, weight);

_list StructuralEstimateReal _alt ::real _atts value::real, lo::real, hi::real, fix::boolean
					_sig(value, lo?, hi?, fix?);
_list StructuralEstimateVector _alt ::vector _atts vectorValue::vector, fix::boolean
					_sig(vectorValue, fix?);
_list StructuralEstimateMatrix _alt ::matrix _atts matrixValue::matrix, fix::boolean
					_sig(matrixValue, fix?);
_list VarEstimateReal _alt ::real  _atts type::varType, value::real, lo::real, hi::real, fix::boolean
							_sig(type?, value, lo?, hi?, fix?);
_list VarEstimateVector _alt ::vector  _atts type::varType, vectorValue::vector, fix::boolean
							_sig(type?, vectorValue, fix?);
_list VarEstimateMatrix _alt ::matrix  _atts type::varType, matrixValue::matrix, fix::boolean
							_sig(type?, matrixValue, fix?);


//MOG Objects
_list MdlObjInMog _atts type::objType _sig(type);

_type AdminTypeType _enum (bolus, infusion, combi, resetAll, reset);

// Design Objects
_list AdminSuperList _super;
_list AdminBolusList _extends AdminSuperList _atts type::AdminTypeType, input::reference[::dosingTarget], amount::real,
						p::real, doseTime::vector, ssInterval::real, timeLastSSDose::real, doseIntervalVar::reference, lastDoseTimeVar::reference
						_sig (type, input, amount, p?, doseTime, doseIntervalVar?, lastDoseTimeVar?),
							(type, input, amount, p?, ssInterval?, timeLastSSDose) ;

_list AdminInfusionList _extends AdminSuperList _atts type::AdminTypeType, input::reference[::dosingTarget], amount::real,
						rate::vector, p::real, doseTime::vector, duration::vector,
						ssInterval::real, timeLastSSDose::real, timeStopSSInfusion::real,
						doseIntervalVar::reference, lastDoseTimeVar::reference
						_sig (type, input, amount, p?, doseTime, rate, doseIntervalVar?, lastDoseTimeVar?),
							(type, input, amount, p?, doseTime, duration),
							(type, input, amount, p?, rate, ssInterval?, timeLastSSDose),
							(type, input, amount, p?, duration, ssInterval?, timeLastSSDose),
							(type, input, rate, p?, timeStopSSInfusion);
						
_list AdminComplexList _extends AdminSuperList _atts type::AdminTypeType, combination::vector[::AdminSuperList], start::vector, end::vector
						_sig (type, combination, start?, end?) ;
_list AdminResetAllList _extends AdminSuperList _atts type::AdminTypeType
						_sig (type) ;
						
_sublist ResetSublist _atts variable::reference[::dosingTarget], resetTime::real, value::real _sig(variable, resetTime?, value?);

_list AdminResetList _extends AdminSuperList _atts type::AdminTypeType, reset::vector[::ResetSublist]
						_sig (type, reset) ;

_sublist intSeqAtts _atts admin::vector[::reference[::AdminSuperList]], start::vector
					_sig (admin, start?);

_sublist sampSeqAtts _atts sample::vector[::reference[::SamplingSuper]], start::vector
					_sig (sample, start);
_sublist OccSeqSubList _atts occasion::vector[::int], level::reference[::varLevel], start::vector
					_sig (occasion, level, start?);
//_sublist OccSeqSubList _atts level::reference[::DesignVariabilityList], occasion::vector[::reference[::genericCategoryValue]], start::vector
//					_sig (occasion, level, start);

_list StudyDesign _atts armSize::int, sameTimes::boolean, 
						occasionSequence::vector[::OccSeqSubList], interventionSequence::vector[::intSeqAtts], samplingSequence::vector[::sampSeqAtts],
						population::reference[::PopulationTemplate]
		_sig (interventionSequence, samplingSequence, occasionSequence?, armSize?, sameTimes?, population?);

//_list DesignVariabilityList _atts varLevel::reference[::VarLevel], catCov::reference[::genericEnum]
//					_sig (varLevel, catCov);

_list DesignSpaceCov _atts objRef::vector[::reference[::real]], element::sampleElement, discrete::vector, range::vector
						_sig (objRef, element, discrete),
							(objRef, element, range);
_list DesignSpaceBolusAmt _atts objRef::vector[::reference[::AdminBolusList]], element::sampleElement, discrete::vector, range::vector
						_sig (objRef, element, discrete),
							(objRef, element, range);
_list DesignSpaceInfAmt _atts objRef::vector[::reference[::AdminInfusionList]], element::sampleElement, discrete::vector, range::vector
						_sig (objRef, element, discrete),
							(objRef, element, range);
_list DesignSpaceDoseTime _atts objRef::vector[::reference[::AdminBolusList]], element::sampleElement, discrete::vector, range::vector
						_sig (objRef, element, discrete),
							(objRef, element, range);
_list DesignSpaceDuration _atts objRef::vector[::reference[::AdminInfusionList]], element::sampleElement, discrete::vector, range::vector
						_sig (objRef, element, discrete),
							(objRef, element, range);
_list DesignSpaceNumTimes _atts objRef::vector[::reference[::SamplingSuper]], element::sampleElement, discrete::vector, range::vector
						_sig (objRef, element, discrete),
							(objRef, element, range);
_list DesignSpaceSampleTimes _atts objRef::vector[::reference[::SamplingSuper]], element::sampleElement, discrete::vector, range::vector
						_sig (objRef, element, discrete),
							(objRef, element, range);
_list DesignSpaceNumArms _atts objRef::vector[::reference[::StudyDesign]], element::sampleElement, discrete::vector, range::vector
						_sig (objRef, element, discrete),
							(objRef, element, range);
_list DesignSpaceArmSize _atts objRef::vector[::reference[::StudyDesign]], element::sampleElement, discrete::vector, range::vector
						_sig (objRef, element, discrete),
							(objRef, element, range);
_list DesignSpaceParam _atts objRef::vector[::reference[::real]], element::sampleElement, discrete::vector, range::vector
						_sig (objRef, element, discrete),
							(objRef, element, range);

_list SamplingSuper _super;

_list SimpleSamplingList _extends SamplingSuper _atts type::sampletype, outcome::reference[::observation], sampleTime::vector,
								numberTimes::int, deltaTime::real, blq::real, ulq::real
							_sig(type, outcome, sampleTime?, numberTimes?, deltaTime?, blq?, ulq?);
_list DerivedSamplingList _extends SamplingSuper _atts type::sampletype, combination::vector[::reference[::SamplingSuper]],
														numberTimes::int, start::vector[::real], relative::boolean
							_sig(type,combination, numberTimes?, start?, relative?);

_type covArgEnumType _enum(constant, idvDependent); 

_type blkMethodType _enum(m1, m2, m3, m4); 
_list blkDefn _atts type::blkMethodType, llq::real _sig(type, llq); 

_type PopnType _enum(template);
_sublist PopTmpltCovSublist _atts catCovValue::reference[::genericCategoryValue], cov::reference[::real],
									catCov::reference[::genericEnum], discreteRv::randomVariable[::genericEnum],
									value::real, rv::randomVariable[::real]
							_sig(catCovValue), (cov, value), (cov, rv), (catCov, discreteRv);
_list PopulationTemplate _atts type::PopnType, covariate::vector[::PopTmpltCovSublist]
						 _sig(type, covariate);

_type blkType _enum(m1, m2, m3, m4);
_list BlqList _atts blqMethod::blkType, lloq::real _sig(blqMethod, lloq);

							
_type estAlgo _enum(saem, foce, fo, focei, mcmc);
_type solverType _enum(stiff, nonStiff);							
_type OptAlgoType _enum(simplex, fw);

_prop algo::estAlgo, solver::solverType, armSize::int, totalSize::int, numberSamples::vector[::int], totalCost::real, numberArms::vector[::int],
				sameTimes::boolean, idLevel::reference[::varLevel];

_prop name::string, problemStmt::string;

_prop optAlgo::OptAlgoType, fim::string, previousFim::string, graphOnly::boolean, typeIError::real, powerComparison::boolean, 
		nSubjectsComparison::boolean,
		equivalenceRange::vector, powerEquivalence::boolean, nSubjectsEquivalence::boolean, typeIIError::real,
		graphLogical::boolean, logLogical::boolean, namesDataX::vector[::string], namesDataY::vector[::string],
		graphInfA::vector, graphSupA::vector, subjectsOpt::boolean, lowerA::vector, upperA::vector, iterPrint::boolean,
		simplexParameter::real, maxIter::int, rcTol::real,identicalTimes::boolean, features::vector[::sampleElement];
		
_prop amount::real, duration::real, sampleTime::real, numberTimes::int, doseTime::real;

_object mdlObj;
_object dataObj;
_object priorObj;
_object taskObj;
_object designObj;
_object parObj;
_object mogObj;


_block COVARIATES (0,)
	_arguments  type::covArgEnumType?
	_statements (0,) _eqnDefn, _eqnDefn+, _enumDefn, _rvDefn;

_block VARIABILITY_LEVELS (0,) _statements (0,) _listDefn
	_list varLevel;
	
_block STRUCTURAL_PARAMETERS (0,) _statements (0,) _eqnDefn, _eqnDefn+;

_block VARIABILITY_PARAMETERS (0,) _statements (0,) _eqnDefn, _eqnDefn+;

_block RANDOM_VARIABLE_DEFINITION (0,) _arguments level::varLevel _statements (0,) 
					_rvDefn, _enumDefn, _anonList
					_list _key=type CorrelationEnumType.covariance->CovarianceList, CorrelationEnumType.correlation->CorrelationList;

_block POPULATION_PARAMETERS (,) _statements(,) _anonList _list _key=type
			 PopnTypeType.continuous -> PopnContinuousList, PopnTypeType.categorical->PopnCategoricalList;

_block INDIVIDUAL_VARIABLES (0,) _statements (0,) _eqnDefn+, _transDefn, _listDefn+, _anonList
	_list _key=type IndivTypeType.linear->IndivParamLinear, IndivTypeType.general -> IndivParamGeneral,
						/*IndivTypeType.userDefined -> IndivUserDefined,*/ IndivTypeType.rv -> IndivRvList;

_block INFO (,) _statements (,) _propStmt _prop name?, problemStmt?;

_block MODEL_PREDICTION (0,) _statements (0,) _eqnDefn, _eqnDefn+, _listDefn
	_list DerivList;
	
_block OBSERVATION (0,) _statements (0,) _eqnDefn+, _transDefn, _listDefn+, _anonList
		_list _key=type obstype.count->CountObs, obstype.categorical->CatObs, obstype.discrete->DiscreteObs, obstype.tte->TteObs,
						obstype.combinedError1->combinedError1List, obstype.combinedError2->combinedError2List,
						obstype.additiveError->additiveErrorList, obstype.proportionalError->proportionalErrorList,
						obstype.continuous -> ContinuousObsList, obstype.userDefined -> UserDefinedObsList
		;

_block GROUP_VARIABLES (0,) _statements (0,) _eqnDefn+, _eqnDefn;

_block IDV (1,1) _statements (1,1) _eqnDefn;

_block DATA_INPUT_VARIABLES (0,) _statements (1,) _listDefn
	_list _key=use divUse.covariate -> Covariate, divUse.catCov -> CatCovariate,
								divUse.cmt -> Cmt, divUse.cmt->Cmt, divUse.amt -> Amt, divUse.ii -> ii, divUse.addl -> addl,
								divUse.id -> Id, divUse.idv -> Idv, divUse.varLevel -> DataVarLevel, divUse.mdv -> Mdv,
								divUse.rate -> rate, divUse.ignore -> ignore, divUse.dvid -> Dvid, divUse.dv -> Dv,
								divUse.ss -> ss, divUse.evid->Evid, divUse.variable->DataVariable,
								divUse.cens->CensCol;
								
_block DECLARED_VARIABLES (0,) _statements (,) _eqnDefn, _enumDefn;

_block DATA_DERIVED_VARIABLES (0,) _statements (,) _listDefn
	_list _key=use ddvUse.doseTime->DoseTime, ddvUse.variable->DDVariable,
				ddvUse.covariate->DDCovariate, ddvUse.catCov->DDCatCovariate, ddvUse.doseInterval->DoseInterval;
_block SOURCE (1,1) _statements (1,1) _listDefn
		_list Source;
		
_block STRUCTURAL (,) _statements (,) _listDefn//, _eqnDefn+
	_list _map StructuralEstimateReal.value->StructuralEstimateReal, StructuralEstimateVector.vectorValue->StructuralEstimateVector,
				StructuralEstimateMatrix.matrixValue->StructuralEstimateMatrix;

_block VARIABILITY (,) _statements (,) _listDefn//, _eqnDefn+
	_list _map VarEstimateReal.value->VarEstimateReal, VarEstimateVector.vectorValue->VarEstimateVector, VarEstimateMatrix.matrixValue->VarEstimateMatrix;

_block ESTIMATE (,1) _statements (,) _propStmt, _listDefn _prop algo _list BlqList;

_block SIMULATE (,1) _statements (,) _propStmt
		_prop solver?;

_block EVALUATE (,1) _statements (,) _propStmt
		_prop graphOnly?, fim?, previousFim?, typeIError?, typeIIError?, powerEquivalence?, powerComparison?, nSubjectsComparison?, equivalenceRange?,
				nSubjectsEquivalence?, graphLogical?, logLogical?, namesDataX?, namesDataY?, graphInfA?, graphSupA?, subjectsOpt?, lowerA?, upperA?,
				iterPrint?, simplexParameter?, maxIter?, rcTol?, identicalTimes?, features?,
				armSize?, amount?, totalSize?, numberSamples?, totalCost?, numberArms?, duration?, sampleTime?,
				numberTimes?, numberArms?, armSize?, doseTime?;
				
_block OPTIMISE (,1) _statements (,) _propStmt
		_prop optAlgo?, graphOnly?, fim?, previousFim?, typeIError?, typeIIError?, powerEquivalence?, powerComparison?, nSubjectsComparison?, equivalenceRange?,
				nSubjectsEquivalence?, graphLogical?, logLogical?, namesDataX?, namesDataY?, graphInfA?, graphSupA?, subjectsOpt?, lowerA?, upperA?,
				iterPrint?, simplexParameter?, maxIter?, rcTol?, identicalTimes?, features?,
				armSize?, amount?, totalSize?, numberSamples?, totalCost?, numberArms?, duration?, sampleTime?,
				numberTimes?, numberArms?, armSize?, doseTime?;

_block TARGET_SETTINGS (,)  _arguments target::string, settingsFile::vector[::string]? _statements (,) _propStmt _prop _free;

_block OBJECTS (1,1) _statements (4,5) _listDefn
		_list MdlObjInMog;
		
_block DEQ (,) _statements (,) _listDefn, _eqnDefn, _eqnDefn+
	_list DerivList;
	
_block COMPARTMENT (,) _statements (,) _listDefn, _anonList
	_list _key=type cmtType.depot->Depot, cmtType.direct->CmtDirect, cmtType.effect->Effect, 
				cmtType.transfer->Transfer, cmtType.compartment->Compartment, cmtType.elimination->Elimination,
				cmtType.distribution->Distribution;
				
_block FUNCTIONS (,) _statements (,) _eqnDefn;

_block INTERVENTION (1, ) _statements (,) _listDefn
	_list _key=type AdminTypeType.bolus->AdminBolusList, AdminTypeType.infusion -> AdminInfusionList, 
						AdminTypeType.combi->AdminComplexList, AdminTypeType.resetAll->AdminResetAllList,
						AdminTypeType.reset->AdminResetList, AdminTypeType.resetAll->AdminResetAllList, AdminTypeType.reset->AdminResetList;

//_block DESIGN_VARIABILITY (,) _statements (,) _listDefn
//	_list DesignVariabilityList;

_block STUDY_DESIGN (,) _statements (,) _listDefn
		_prop armSize?, totalSize?, numberSamples?, totalCost?, numberArms?, sameTimes?, idLevel
		_list StudyDesign;

_block SAMPLING (,) _statements (,) _listDefn
		_list _key=type sampletype.simple->SimpleSamplingList, sampletype.combi->DerivedSamplingList;

_block DESIGN_SPACES (,) _statements (,) _listDefn
		_list _key=element //sampleelement.catCov->DesignSpaceCatCov, 
							sampleElement.covariate->DesignSpaceCov, sampleElement.bolusAmt->DesignSpaceBolusAmt,
								sampleElement.infAmt->DesignSpaceInfAmt,
								sampleElement.doseTime -> DesignSpaceDoseTime, sampleElement.duration->DesignSpaceDuration,
								sampleElement.numberTimes->DesignSpaceNumTimes, sampleElement.sampleTime->DesignSpaceSampleTimes,
								sampleElement.numberArms->DesignSpaceNumArms, sampleElement.armSize->DesignSpaceArmSize,
								sampleElement.parameter->DesignSpaceParam;

_block DESIGN_PARAMETERS (,) _statements (,) _eqnDefn, _eqnDefn+;
_block PRIOR_PARAMETERS (,) _statements (,) _eqnDefn, _eqnDefn+;
_block NON_CANONICAL_DISTRIBUTION (,) _statements (,) _eqnDefn;
_block PRIOR_VARIABLE_DEFINITION (,) _statements (,) _eqnDefn, _eqnDefn+, _rvDefn;
_block INPUT_PRIOR_DATA (,) _statements (,) _anonList
	_list _map PriorVectorInput.vectorVar -> PriorVectorInput, PriorMatrixInput.matrixVar->PriorMatrixInput;
_block PRIOR_SOURCE (,) _statements (,) _listDefn
	_list _key=inputFormat  /*priorInput.RList->PriorSourceRList,*/ priorInput.csv->PriorSourceCsv;
_block POPULATION (,) _statements (,) _listDefn
	_list _key=type PopnType.template->PopulationTemplate;


_container mdlObj _has COVARIATES, VARIABILITY_LEVELS, STRUCTURAL_PARAMETERS, VARIABILITY_PARAMETERS, RANDOM_VARIABLE_DEFINITION,
					INDIVIDUAL_VARIABLES, MODEL_PREDICTION, OBSERVATION, GROUP_VARIABLES, IDV, FUNCTIONS, POPULATION_PARAMETERS;
_container dataObj _has DATA_INPUT_VARIABLES, DECLARED_VARIABLES, DATA_DERIVED_VARIABLES, SOURCE, FUNCTIONS;
_container parObj _has VARIABILITY, /*DECLARED_VARIABLES,*/ STRUCTURAL;
_container taskObj _has ESTIMATE, SIMULATE, OPTIMISE, EVALUATE;
_container mogObj _has INFO, OBJECTS;
_container designObj _has DECLARED_VARIABLES, INTERVENTION, STUDY_DESIGN, SAMPLING, DESIGN_SPACES, DESIGN_PARAMETERS, POPULATION; //, DESIGN_VARIABILITY;
_container priorObj _has PRIOR_PARAMETERS, NON_CANONICAL_DISTRIBUTION, PRIOR_VARIABLE_DEFINITION;
_container MODEL_PREDICTION _has DEQ, COMPARTMENT;
_container NON_CANONICAL_DISTRIBUTION _has PRIOR_SOURCE, INPUT_PRIOR_DATA;
_container ESTIMATE _has TARGET_SETTINGS;
_container SIMULATE _has TARGET_SETTINGS;
_container EVALUATE _has TARGET_SETTINGS;
_container OPTIMISE _has TARGET_SETTINGS;


_func log (x::real, y::real) _returns ::real;
_func log2 (x::real) _returns ::real;
_func log10 (x::real) _returns ::real;
_func ln (x::real) _returns ::real;
_func probit (x::real) _returns ::real;
_func logit (x::real) _returns ::real;
_func invLogit (x::real) _returns ::real;
_func invProbit (x::real) _returns ::real;
_func factorial (x::real) _returns ::real;
_func lnFactorial (x::real) _returns ::real;
_func sin (x::real) _returns ::real;
_func cos (x::real) _returns ::real;
_func tan (x::real) _returns ::real;
_func sinh (x::real) _returns ::real;
_func cosh (x::real) _returns ::real;
_func tanh (x::real) _returns ::real;
_func asin (x::real) _returns ::real;
_func acos (x::real) _returns ::real;
_func atan (x::real) _returns ::real;
_func asinh (x::real) _returns ::real;
_func acosh (x::real) _returns ::real;
_func atanh (x::real) _returns ::real;
_func floor (x::real) _returns ::real;
_func ceiling (x::real) _returns ::real;
_func min (x::real, y::real) _returns ::real;
_func max (x::real, y::real) _returns ::real;
_func abs (x::real) _returns ::real;
_func exp (x::real) _returns ::real;
_func sqrt (x::real) _returns ::real;
_func sum (x::vector) _returns ::real;
_func mean (x::vector) _returns ::real;
_func median (x::vector) _returns ::real;
_func toInt (x::real) _returns ::int;

// vector manipulation functions
_func seq "Create a sequence of real numbers with given interval until to is reached." (from::real, to::real, interval::real)
	_returns ::vector;
_func seqby "Create a sequence of real numbers repeated n times" (from::real, to::real, by::real)
	_returns ::vector;
_func dseq "Create a sequence of integers."
	(from::int, to::int, interval::int)
	_returns ::vector[::int];
_func rep "Repeats vector, similar to the R function." (x::vector, times::int "Number of times to repeat the vector", each::int "Each element is repeated n times.") _returns ::vector;

// Matrix functions
_func toMatrixByRow(rows::vector[::vector[::real]]) _returns ::matrix;
_func toMatrixByCol(cols::vector[::vector[::real]]) _returns ::matrix;
_func asVector(x::matrix) _returns ::vector;
_func inverse(x::matrix) _returns ::matrix;
_func triangle(x::vector, dim::int, diagonalFlag::boolean) _returns ::matrix;
_func transpose(x::matrix) _returns ::matrix;
_func diagonal(x::vector) _returns ::matrix;
_func gInv "Inversion (Pseudo/general Inverse)" (A::matrix) _returns ::matrix;
_func det "Determinant" (A::matrix) _returns ::real; 
_func eigen "Eigen Value" (A::vector) _returns ::real;
_func chol "Cholsky decomposition" (A::matrix) _returns ::matrix;


// interpolation functions
_func linearInterp(x::real, t0::real, x0::real, t1::real, x1::real) _returns ::real;
_func constInterp(x::real, t0::real, x0::real, t1::real, x1::real) _returns ::real;
_func lastValueInterp(x::real, t0::real, x0::real, t1::real, x1::real) _returns ::real;
_func nearestInterp(x::real, t0::real, x0::real, t1::real, x1::real) _returns ::real;
_func cubicInterp(x::real, t0::real, x0::real, t1::real, x1::real) _returns ::real;
_func pchipInterp(x::real, t0::real, x0::real, t1::real, x1::real) _returns ::real;
_func splineInterp(x::real, t0::real, x0::real, t1::real, x1::real) _returns ::real;

// Named functions
_func Normal "Normal distribution with varying parameterisation" _named
				(mean::real "mean",
				sd::real " standard deviation",
				var::real "variance"
			)
			_sig (mean, sd),
				(mean, var)
			_returns ::pdf
			;

_func Normal1 "Normal distribution with s.d." _named
				(mean::real "mean",
				stdev::real " standard deviation"
			)
			_sig (mean, stdev)
			_returns ::pdf
			;

_func Normal2 "Normal distribution with variance" _named
				(mean::real "mean",
				var::real "variance"
			)
			_sig (mean, var)
			_returns ::pdf
			;

_func Normal3 "Normal distribution with precision" _named
				(mean::real "mean",
				precision::real "precision"
			)
			_sig (mean, precision)
			_returns ::pdf
			;

//_func Phi "Cumulative distribution functions of Standard Normal" _named
//				(x::Real)
//			_sig (x)
//			_returns ::Real
//			;
			
_func LogNormal1 "Log Normal distribution 1" _named
		(
			meanLog::real "mean of log",
			stdevLog::real "shape"
		)
		_sig(meanLog, stdevLog)
		_returns ::pdf;

_func LogNormal2 "Log Normal distribution 2" _named
		(
			meanLog::real "mean of log",
			varLog::real "shape"
		)
		_sig(meanLog, varLog)
		_returns ::pdf;

_func LogNormal3 "Log Normal distribution 3" _named
		(
			median::real "median / geometric mean",
			stdevLog::real "shape"
		)
		_sig(median, stdevLog)
		_returns ::pdf;

_func Bernoulli1 "Bernoulli distributions" _named
				(
					probability::real
				)
				_sig (probability)
				_returns ::pmf
			;
			
_func Poisson1 "Poisson distribution" _named
			(
				rate::real "Poisson intensity"
			)
			_sig (rate)
			_returns ::pmf;

_func Binomial1 " Bernouli distributon with parameters n and p" _named
			(
				probability::real "success probability in each trial",
				numberOfTrials::real "number of trial"
			)
			_sig(probability, numberOfTrials)
			_returns ::pmf;
_func Gamma1 _named
			(
				shape::real,
				scale::real
			)
			_sig(shape, scale)
			_returns ::pdf;
_func Gamma2 _named
			(
				shape::real,
				rate::real
			)
			_sig(shape, rate)
			_returns ::pdf;
			
_func InverseGamma1 "Inverse Gamma 1" _named
			(
				shape::real "shape",
				scale::real "scale"
			)
			_sig(shape, scale)
			_returns ::pdf;
			

_func NonParametric _named
			(
				bins::vector,
				probability::vector
			)
			_sig (bins, probability)
			_returns ::pdf;
_func MultiNonParametric _named
			(
				bins::matrix,
				probability::vector
			)
			_sig (bins, probability)
			_returns ::vector[::pdf];
_func Empirical _named
			(
				data::vector
			)
			_sig(data)
			_returns ::pdf;
_func MultiEmpirical _named
			(
				data::matrix
			)	
			_sig (data)
			_returns ::vector[::pdf];		

_func MultivariateNormal1 "Multivariate normal distribution" _named
			(
				mean::vector "location",
				covarianceMatrix::matrix "covariance matrix"
			)
			_sig (mean, covarianceMatrix)
			_returns ::vector[::pdf];

_func MultivariateNormal2 "Multivariate normal distribution" _named
			(
				mean::vector "location",
				precisionMatrix::matrix "inverse of the covariance matrix"
			)
			_sig (mean, precisionMatrix)
			_returns ::vector[::pdf];

_func MultivariateStudentT1 "Multivariate (Student) T distribution" _named
			(
				mean::vector "location",
				covarianceMatrix::matrix "covariance matrix",
				degreesOfFreedom::real "degrees of freedom"
			)
			_sig (mean, covarianceMatrix, degreesOfFreedom)
			_returns ::vector[::pdf];

_func MultivariateStudentT2 "Multivariate (Student) T distribution" _named
			(
				mean::vector "location",
				precisionMatrix::matrix "inverse of the covariance matrix",
				degreesOfFreedom::real "degrees of freedom"
			)
			_sig (mean, precisionMatrix, degreesOfFreedom)
			_returns ::vector[::pdf];

_func NegativeBinomial2 "Negative Binomial" _named
			(
				rate::real "Poisson intensity",
				overdispersion::real "over-dispersion"
			)
			_sig (rate, overdispersion)
			_returns ::pmf;

_func StudentT1 "Student's t-distribution" _named (
				degreesOfFreedom::real
			)
			_sig (degreesOfFreedom)
			_returns ::pdf;

_func StudentT2 "Student's t-distribution" _named (
				mean::real "mean",
				scale::real "scale",
				degreesOfFreedom::real
			)
			_sig (mean, scale, degreesOfFreedom)
			_returns ::pdf;

_func Uniform1 "Uniform distribution" _named (
				minimum::real "minimum",
				maximum::real "maximum"
			)
			_sig(minimum, maximum)
			_returns ::pdf;

_func Wishart1 "Wishart distribution" _named
			(
				scaleMatrix::matrix "scale matrix",
				degreesOfFreedom::real "degrees of freedom"
			)
			_sig (scaleMatrix, degreesOfFreedom)
			_returns ::matrix[[::pdf]];
			
_func Wishart2 "Wishart distribution" _named
			(
				inverseScaleMatrix::matrix "inverse scale matrix",
				degreesOfFreedom::real "degrees of freedom"
			)
			_sig (inverseScaleMatrix, degreesOfFreedom)
			_returns ::matrix[[::pdf]];
		
_func InverseWishart1 "Inverse Wishart" _named (
				scaleMatrix::matrix "scale matrix",
				degreesOfFreedom::real "degrees of freedom"
			)
			_sig(scaleMatrix, degreesOfFreedom)
			_returns ::matrix[[::pdf]];
		
_func CategoricalNonordered1 _named
			(
				categoryProb::vector[::real]
			)
			_sig (categoryProb)
			_returns ::pmf;
_func CategoricalOrdered1 _named
			(
				categoryProb::vector[::real]
			)
			_sig (categoryProb)
			_returns ::pmf;
			
_func MixtureDistribution _named (
				weight::vector  "mixing coefficients",
				distributions::vector[::pdf]
			)
			_sig (weight, distributions)
			_returns ::pdf;

_func ZeroInflatedPoisson1 "Sero-inflated Poisson" _named (
				rate::real "Poisson intensity",
				probabilityOfZero::real "probability of zero"
			)
			_sig(rate, probabilityOfZero)
			_returns ::pdf;

_func matrix _named
		(
			vector::vector,
			ncol::real,
			byRow::boolean
		)
		_sig (vector, ncol, byRow)
		_returns ::matrix;
//_func linear _named
//		( 
//			trans::transType,
//			pop::Real,
//			fixEff::Vector[::fixEffAtts],
//			ranEff::Vector[::RandomVariable]
//		)
//		_sig(trans?, pop, fixEff?, ranEff) 
//		_returns ::Real;
//_func general _named (
//				trans::transType,
//				grp::Real,
//				ranEff::Vector[::RandomVariable]
//			)
//			_sig(trans?, grp, ranEff) 
//			_returns ::Real;
//_func combinedError1 _named
//		( 
//			trans::transType,
//			additive::Real,
//			proportional::Real,
//			prediction::Real,
//			eps::RandomVariable[::Real]
//		)
//		_sig(trans?, additive, proportional, prediction, eps)
//		_returns ::combinedError1List
////		_returns ::Real
//;
//_func combinedError2 _named
//		( 
//			trans::transType,
//			additive::Real,
//			proportional::Real,
//			prediction::Real,
//			eps::RandomVariable[::Real]
//		)
//		_sig(trans?, additive, proportional, prediction, eps)
//		_returns ::combinedError2List
////		_returns ::Real
//;
//_func additiveError _named
//		( 
//			trans::transType,
//			additive::Real,
//			prediction::Real,
//			eps::RandomVariable[::Real]
//		)
//		_sig(trans?, additive, prediction, eps)
////		_returns ::Real
//		_returns ::additiveErrorList
//;
//_func proportionalError _named
//		( 
//			trans::transType,
//			proportional::Real,
//			prediction::Real,
//			eps::RandomVariable[::Real]
//		)
//		_sig(trans?, proportional, prediction, eps)
////		_returns ::Real
//		_returns ::proportionalErrorList
//;
//_func readVector _named
//			(
//				src::PriorSourceCsv,
//				column::string
//				
//			)
//			_sig(src, column)
//			_returns ::vector;
//_func readMatrix _named
//			(
//				src::PriorSourceCsv,
//				column::vector[::string]
//			)
//			_sig(src, column)
//			_returns ::matrix;
//_func readVectorFromTable _named
//			(
//				src::PriorTabularSource,
//				column::vector[::string]
//			)
//			_sig(src, column)
//			_returns ::vector;
//_func readMatrixFromTable _named
//			(
//				src::PriorTabularSource,
//				column::vector[::string]
//			)
//			_sig(src, column)
//			_returns ::matrix;
